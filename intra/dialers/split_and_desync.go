package dialers

/*
Combine direct_split with TCB (Transmission Control Block) Desynchronization Attack
Inspired by byedpi
*/

import (
	"crypto/rand"
	"errors"
	"io"
	mathrand "math/rand"
	"net"
	"net/netip"
	"strings"
	"sync/atomic"
	"time"

	"github.com/celzero/firestack/intra/core"
	"github.com/celzero/firestack/intra/log"
	"github.com/celzero/firestack/intra/protect"
	"golang.org/x/sys/unix"
)

const (
	probeSize     = 8
	Http1_1String = "POST / HTTP/1.1\r\nHost: 10.0.0.1\r\nContent-Type: application/octet-stream\r\nContent-Length: 9999999\r\n\r\n"

	DESYNC_MAX_TTL  = 24 // some arbitrary value
	DESYNC_NOOP_TTL = DESYNC_MAX_TTL
)

// ttlcache stores the TTL for a given IP address for a limited time.
// TODO: invalidate cache on network changes.
var ttlcache = core.NewDefaultSieve[netip.Addr, int]()

type overwriteSplitter struct {
	conn    *net.TCPConn
	used    atomic.Bool
	ttl     int
	payload []byte // must be smaller than 1st written packet
	// note: Normal ClientHello generated by browsers is 517 bytes. If kyber is enabled, the ClientHello can be larger.
}

var _ DuplexConn = (*overwriteSplitter)(nil)

// exceedsHopLimit checks if cmsgs contains an ICMPv6 hop limit exceeded SockExtendedErr
//
//	type SockExtendedErr struct {
//		Errno  uint32
//		Origin uint8
//		Type   uint8
//		Code   uint8
//		Pad    uint8
//		Info   uint32
//		Data   uint32
//	}
//
// https://www.rfc-editor.org/rfc/rfc4443.html#section-3.3
func exceedsHopLimit(cmsgs []unix.SocketControlMessage) bool {
	for _, cmsg := range cmsgs {
		if cmsg.Header.Level == unix.IPPROTO_IPV6 && cmsg.Header.Type == unix.IPV6_RECVERR {
			eeOrigin := cmsg.Data[4]
			if eeOrigin == unix.SO_EE_ORIGIN_ICMP6 {
				eeType := cmsg.Data[5]
				eeCode := cmsg.Data[6]
				if eeType == 3 && eeCode == 0 {
					return true
				}
			}
		}
	}
	return false
}

// exceedsTTL checks if cmsgs contains an ICMPv4 time to live exceeded SockExtendedErr.
// https://www.rfc-editor.org/rfc/rfc792.html#page-6
func exceedsTTL(cmsgs []unix.SocketControlMessage) bool {
	for _, cmsg := range cmsgs {
		if cmsg.Header.Level == unix.IPPROTO_IP && cmsg.Header.Type == unix.IP_RECVERR {
			eeOrigin := cmsg.Data[4]
			if eeOrigin == unix.SO_EE_ORIGIN_ICMP {
				eeType := cmsg.Data[5]
				eeCode := cmsg.Data[6]
				if eeType == 11 && eeCode == 0 {
					return true
				}
			}
		}
	}
	return false
}

// DialWithSplitAndDesyncTraceroute estimates the TTL with UDP traceroute,
// then returns a TCP connection that may launch TCB Desynchronization Attack and split the initial upstream segment
// If `payload` is smaller than the initial upstream segment, it launches the attack and splits.
// This traceroute is not accurate, because of time limit (TCP handshake).
// Note: The path the UDP packet took to reach the destination may differ from the path the TCP packet took.
func DialWithSplitAndDesyncTraceroute(d *protect.RDial, ipp netip.AddrPort, payload []byte) (*overwriteSplitter, error) {
	udpAddr := net.UDPAddrFromAddrPort(ipp)
	udpAddr.Port = 1 // unset port
	maxTTL := DESYNC_MAX_TTL

	isIPv6 := ipp.Addr().Is6()

	/*
		Use udp4 for IPv4 to prevent OS from giving cmsg(s) which mix IPPROTO_IPV6 cmsg level and IPv4-related cmsg data,
		because exceedsTTL() returns false when cmsg.Header.Level == IPPROTO_IPV6
	*/
	var networkStr string
	if isIPv6 {
		networkStr = "udp6"
	} else {
		networkStr = "udp4"
	}

	udpConn, err := d.AnnounceUDP(networkStr, ":0")
	if err != nil {
		log.E("split-desync: err announcing udp: %v", err)
		return nil, err
	}
	if udpConn == nil {
		return nil, errNoConn
	}

	defer func() {
		err := udpConn.Close()
		logeif(err)("split-desync: close udp; err? %v", err)
	}()

	rawConn, err := udpConn.SyscallConn()
	if err != nil {
		return nil, err
	}
	if rawConn == nil {
		return nil, errors.New("split-desync: SyscallConn(udp) nil")
	}
	var udpFD int
	err = rawConn.Control(func(fd uintptr) {
		udpFD = int(fd)
	})
	if err != nil {
		return nil, err
	}

	if isIPv6 {
		err = unix.SetsockoptInt(udpFD, unix.IPPROTO_IPV6, unix.IPV6_RECVERR, 1)
	} else {
		err = unix.SetsockoptInt(udpFD, unix.IPPROTO_IP, unix.IP_RECVERR, 1)
	}
	if err != nil {
		return nil, err
	}

	var msgBuf [probeSize]byte
	var ttl int
	basePort := 1 + mathrand.Intn(65535-maxTTL) //#nosec G404
	for ttl = 2; ttl <= maxTTL; ttl++ {
		_, err = rand.Read(msgBuf[:])
		if err != nil {
			return nil, err
		}
		if isIPv6 {
			err = unix.SetsockoptInt(udpFD, unix.IPPROTO_IPV6, unix.IPV6_UNICAST_HOPS, ttl)
		} else {
			err = unix.SetsockoptInt(udpFD, unix.IPPROTO_IP, unix.IP_TTL, ttl)
		}
		if err != nil {
			return nil, err
		}
		udpAddr.Port = basePort + ttl
		_, err = udpConn.WriteToUDP(msgBuf[:], udpAddr)
		if err != nil {
			return nil, err
		}
	}

	tcpConn, err := d.DialTCP("tcp", nil, net.TCPAddrFromAddrPort(ipp))
	if err != nil {
		return nil, err
	}
	if tcpConn == nil {
		return nil, errNoConn
	}

	bptr := core.Alloc()
	cmsgBuf := *bptr
	cmsgBuf = cmsgBuf[:cap(cmsgBuf)]
	defer func() {
		*bptr = cmsgBuf
		core.Recycle(bptr)
	}()

	split1 := &overwriteSplitter{
		conn:    tcpConn,
		ttl:     1,
		payload: payload,
	}

	// after TCP handshake, check received ICMP messages.
	for i := 0; i < maxTTL-1; i++ {
		_, cmsgN, _, from, err := unix.Recvmsg(udpFD, msgBuf[:], cmsgBuf[:], unix.MSG_ERRQUEUE)
		if err != nil {
			log.V("split-desync: recvmsg failed: %v", err)
			break // udpConn must be nonblocking
		}

		cmsgs, err := unix.ParseSocketControlMessage(cmsgBuf[:cmsgN])
		if err != nil {
			log.W("split-desync: parseSocketControlMessage failed: %v", err)
			continue
		}

		if isIPv6 {
			if exceedsHopLimit(cmsgs) {
				fromPort := from.(*unix.SockaddrInet6).Port
				ttl = fromPort - basePort
				if ttl <= maxTTL {
					split1.ttl = max(split1.ttl, ttl)
				}
			}
		} else {
			if exceedsTTL(cmsgs) {
				fromPort := from.(*unix.SockaddrInet4).Port
				ttl = fromPort - basePort
				if ttl <= maxTTL {
					split1.ttl = max(split1.ttl, ttl)
				}
			}
		}
	}
	if split1.ttl == 1 {
		split1.ttl = DESYNC_NOOP_TTL
	}

	log.D("split-desync: addr: %v, ttl: %d", ipp, split1.ttl)

	return split1, nil
}

func DialWithSplitAndDesyncFixedTtl(d *protect.RDial, addr netip.AddrPort, initialTTL int, payload []byte) (*overwriteSplitter, error) {
	tcpConn, err := d.DialTCP("tcp", nil, net.TCPAddrFromAddrPort(addr))
	if err != nil {
		return nil, err
	}
	if tcpConn == nil {
		return nil, errNoConn
	}
	return &overwriteSplitter{
		conn:    tcpConn,
		ttl:     initialTTL,
		payload: payload,
	}, nil
}

// DialWithSplitAndDesyncSmart estimates the TTL with UDP traceroute,
// then returns a TCP connection that may launch TCB Desynchronization
// and split the initial upstream segment.
func DialWithSplitAndDesyncSmart(d *protect.RDial, ipp netip.AddrPort, payload []byte) (DuplexConn, error) {
	ttl, ok := ttlcache.Get(ipp.Addr())
	if ok {
		return DialWithSplitAndDesyncFixedTtl(d, ipp, ttl, payload)
	}
	conn, err := DialWithSplitAndDesyncTraceroute(d, ipp, payload)
	if err == nil && conn != nil { // go vet (incorrectly) complains about conn being nil when err is nil
		ttlcache.Put(ipp.Addr(), conn.ttl)
	}
	return conn, err
}

// Close implements DuplexConn.
func (s *overwriteSplitter) Close() error { core.CloseTCP(s.conn); return nil }

// CloseRead implements DuplexConn.
func (s *overwriteSplitter) CloseRead() error { core.CloseTCPRead(s.conn); return nil }

// CloseWrite implements DuplexConn.
func (s *overwriteSplitter) CloseWrite() error { core.CloseTCPWrite(s.conn); return nil }

// LocalAddr implements DuplexConn.
func (s *overwriteSplitter) LocalAddr() net.Addr { return laddr(s.conn) }

// RemoteAddr implements DuplexConn.
func (s *overwriteSplitter) RemoteAddr() net.Addr { return raddr(s.conn) }

func (s *overwriteSplitter) SetDeadline(t time.Time) error {
	if c := s.conn; c != nil {
		return c.SetDeadline(t)
	}
	return nil // no-op
}

// SetReadDeadline implements DuplexConn.
func (s *overwriteSplitter) SetReadDeadline(t time.Time) error {
	if c := s.conn; c != nil {
		return c.SetReadDeadline(t)
	}
	return nil // no-op
}

// SetWriteDeadline implements DuplexConn.
func (s *overwriteSplitter) SetWriteDeadline(t time.Time) error {
	if c := s.conn; c != nil {
		return c.SetWriteDeadline(t)
	}
	return nil // no-op
}

// Read implements DuplexConn.
func (s *overwriteSplitter) Read(b []byte) (int, error) { return s.conn.Read(b) }

// Write implements DuplexConn.
func (s *overwriteSplitter) Write(b []byte) (int, error) {
	conn := s.conn
	if s.used.Load() {
		// after the first write, there is no special write behavior.
		return conn.Write(b)
	}

	// set `used` to ensure this code only runs once per conn.
	if !s.used.CompareAndSwap(false, true) {
		return conn.Write(b)
	}

	if len(b) <= len(s.payload) {
		return conn.Write(b)
	}
	rawConn, err := conn.SyscallConn()
	if err != nil {
		return 0, err
	}
	if rawConn == nil {
		return 0, errors.New("split-desync: SyscallConn(tcp) nil")
	}
	var sockFD int
	err = rawConn.Control(func(fd uintptr) {
		sockFD = int(fd)
	})
	if err != nil {
		log.E("split-desync: get sock fd failed; %v", err)
		return 0, err
	}

	fileFD, err := unix.MemfdCreate("haar", unix.O_RDWR)
	if err != nil {
		return 0, err
	}
	defer func() {
		err := unix.Close(fileFD)
		logeif(err)("desync: close memfd; err? %v", err)
	}()
	err = unix.Ftruncate(fileFD, int64(len(s.payload)))
	if err != nil {
		return 0, err
	}
	firstSegment, err := unix.Mmap(fileFD, 0, len(s.payload), unix.PROT_WRITE, unix.MAP_SHARED)
	if err != nil {
		return 0, err
	}
	defer func() {
		err := unix.Munmap(firstSegment)
		logeif(err)("desync: munmap; err? %v", err)
	}()

	// We want s.Payload to be seen by censors, but don't want s.Payload to be seen by the server.
	copy(firstSegment, s.payload)
	mRemote := conn.RemoteAddr()
	if mRemote == nil {
		return 0, errors.New("split-desync: remoteaddr nil")
	}
	isIPv6 := strings.Contains(mRemote.String(), "[")
	if isIPv6 {
		err = unix.SetsockoptInt(sockFD, unix.IPPROTO_IPV6, unix.IPV6_UNICAST_HOPS, s.ttl)
	} else {
		err = unix.SetsockoptInt(sockFD, unix.IPPROTO_IP, unix.IP_TTL, s.ttl)
	}
	if err != nil {
		log.E("split-desync: setsockopt failed: %v", err)
		return 0, err
	}
	var offset int64 = 0
	n1, err := unix.Sendfile(sockFD, fileFD, &offset, len(s.payload))
	if err != nil {
		log.E("split-desync: sendfile %d failed: %v", n1, err)
		return n1, err
	}

	copy(firstSegment, b[:len(s.payload)])
	if isIPv6 {
		err = unix.SetsockoptInt(sockFD, unix.IPPROTO_IPV6, unix.IPV6_UNICAST_HOPS, 64)
	} else {
		err = unix.SetsockoptInt(sockFD, unix.IPPROTO_IP, unix.IP_TTL, 64)
	}
	if err != nil {
		log.E("split-desync: setsockopt failed: %v", err)
		return n1, err
	}

	// write the second segment
	n2, err := conn.Write(b[len(s.payload):])
	logeif(err)("split-desync: write: n1: %d, n2: %d, err: %v", n1, n2, err)
	return n1 + n2, err
}

// ReadFrom reads from the reader and writes to s.
func (s *overwriteSplitter) ReadFrom(reader io.Reader) (bytes int64, err error) {
	if !s.used.Load() {
		bytes, err = copyOnce(s, reader)
		logeif(err)("split-desync: readfrom: copyOnce; sz: %d; err: %v", bytes, err)
		if err != nil {
			return
		}
	}

	b, err := s.conn.ReadFrom(reader)
	bytes += b
	return
}
